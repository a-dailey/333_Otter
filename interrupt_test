.eqv MMIO, 0x11000000	    # MMIO
.eqv STACK 0x10000
.eqv INT_EN, 8		    # enable interrupts

INIT:	       li    sp, STACK      # setup sp
             li    s0, MMIO	    # setup MMIO pointer
             la    t0, ISR
             csrrw x0, mtvec, t0  # setup ISR address
             addi  t1, x0, 0
             csrrs t1, mtvec, x0  # read mtvec
             addi  s4, x0, 1	    # ERROR Code 1
             bne   t0, t1, FAIL    # check mtvec
             addi  s3, x0, 0       # clear interrupt FAIL
             addi  s1, x0, 0	     # clear interrupt flag
             addi  s2, x0, 0	     # clear interrupt count
             sw    s2, 0x40(s0)    # clear 7 seg
	
LOOP:	       lw    a0, 0(s0)	     # read SWITCHES
             andi  a0, a0, 0x01    # Mask SWITCH 1
             call  SET_INT	     # set interrupt bit from switches
             beqz  a0, NO_ERROR    # return 0 if no error
             add   s4, a0, x0      # copy error code
             j     FAIL
      
NO_ERROR:    beq   s1, x0, LOOP    # check for interrupt flag
             sw    s2, 0x40(s0)    # update 7 seg with new count
             addi  s1, x0, 0	     # clear interrupt flag		
             beqz  s3, LOOP        # check interrupt error flag	     
             addi  s4, x0, 3       # error code for mstatus interrupt

FAIL:	       li    t0, INT_EN      # Fail State
             csrrc x0, mstatus, t0 # disable interrupts	
             li    t0, 0xFF00
             or    s4, s4, t0      # ERROR Code
             sw    s4, 0x40(s0)    # display ERROR on 7 Seg
STOP:	       j     STOP

#########################################################
# Set/Clear Interrupts Subroutine
# a0: 1 - enable, 0 - disable
# return a0: error code (0 = no error)
#########################################################
SET_INT:     li    t0, INT_EN      
             beqz  a0, SET_INT_DIS
             addi  a0, x0, 0           # clear return value
             csrrs x0, mstatus, t0     # enable interrupts
             addi  t1, x0, 0
             csrrs t1, mstatus, x0     # read mstatus
             and   t1, t1, t0          # mask MIE bit
             beq   t0, t1, SET_INT_RET # check MIE bit for error
             addi  a0, x0, 2	         # set error code
             ret
SET_INT_DIS: addi  a0, x0, 0           # clear return value
             csrrc x0, mstatus, t0     # disable interrupts
             addi  t1, x0, 0
             csrrs t1, mstatus, x0     # read mstatus
             and   t1, t1, t0          # mask MIE bit
             beqz  t1, SET_INT_RET     # check MIE bit for error
             addi  a0, x0, 2	         # ERROR Code 2
SET_INT_RET: ret

#########################################################
# ISR 
#########################################################
ISR:	       addi  sp, sp, -8       # push t1, t2 to stack
             sw    t1, 4(sp)
             sw    t2, 0(sp)
             addi  s1, x0, 1	      # set interrupt flag
             addi  s2, s2, 1	       # increment interrupt count
             li    t2, 0x80          # MPIE and MIE bit mask 
             csrrs t1, mstatus, x0   # read mstatus
             and   t1, t1, t2        # mask MIE bit
             li    t2, 0x80          # Comparison MPIE=1, MIE=0
             beq   t1, t2, ISR_RET
             addi  s3, x0, 1	       # set interrupt error flag
ISR_RET:	 lw    t2, 0(sp)	       # pop t1, t2 from stack
             lw    t1, 4(sp)
             addi  sp, sp, 8  
             mret
