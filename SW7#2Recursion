main:
li s0, 0x11000000 #load switch address
li sp, 0x00010000 #initialize stack pointer
lw s1, 0x00(s0)   #store switch value in s1
srli t1, s1, 16 #store left number in t1
slli t2, s1, 16 #get rid of left 16-bits
srli t2, t2, 16 #shift number back to right and store in t2
mv a0, t1 #move left 16-bit # to argument register 0
mv a1, t2 #move right 16-bit # to argument register 0
call gcd
j end


gcd: 
beq a0, a1, equal #if arguments equal, gcd is either register

bgt a0, a1, gt    #if a0 > a1, modify arguments, recall
j lt


gt:
sub a0, a0, a1
addi sp, sp, -4  #decrement stack pointer
sw ra, 0x00(sp)  #store ra on stack
call gcd
lw ra, 0x00(sp)  #load ra from stack
addi sp, sp, 4   #increment sp
ret



lt:
sub a1, a1, a0 
addi sp, sp, -4  #decrement stack pointer
sw ra, 0x00(sp)  #store ra on stack
call gcd
lw ra, 0x00(sp)  #load ra from stack
addi sp, sp, 4   #increment sp
ret

equal:
mv a2, a0 #move either register to answer register
ret

end:
sw a2, 0x20(s0) #store gcd in leds
j main
